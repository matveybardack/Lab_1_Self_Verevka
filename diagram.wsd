@startuml ClassDiagram(UI & Services and ClassLibrary)
' PlantUML class diagram for "Сортировщик массивов" project
' File: WpfAppSorter_ClassDiagram.wsd
' Пакеты разделяют UI/Сервисы и Библиотеку классов

skinparam classAttributeIconSize 0

package "WpfAppSorter (UI & Сервисы)" {

  interface IArrayManagerService {
    +Add(item: string)
    +Remove(index: int)
    +Clear()
    +IsInitialized(): bool
    +ParseElement(value: string): object
  }

  interface IArraySorterService {
    +BubbleSort(items: IList<object>)
    +SelectionSort(items: IList<object>)
    +InsertionSort(items: IList<object>)
    +QuickSort(items: IList<object>)
    +Compare(a: object, b: object): int
  }

  interface IFileManagerService {
    +Save(path: string, items: IList<object>)
    +Load(path: string): IList<object>
    +TrackFile(path: string)
    +GetTrackedFiles(): IList<string>
  }

  class ArrayManagerService {
    -items: List<object>
    -locked: bool
    +Add(item: string)
    +Remove(index: int)
    +Clear()
    +IsInitialized(): bool
  }

  class ArraySorterService {
    +BubbleSort(items: IList<object>)
    +SelectionSort(items: IList<object>)
    +InsertionSort(items: IList<object>)
    +QuickSort(items: IList<object>)
  }

  class FileManagerService {
    -trackedFiles: List<string>
    +Save(path: string, items: IList<object>)
    +Load(path: string): IList<object>
    +TrackFile(path: string)
    +GetTrackedFiles(): IList<string>
  }

  class MainWindow {
    +OnSortButtonClicked()
    +OnLoadFile()
    +OnSaveFile()
  }

}

package "ClassLibrarySorter (чистая логика)" {

  class ArraySorter {
    +BubbleSort(items: IList<object>)
    +SelectionSort(items: IList<object>)
    +InsertionSort(items: IList<object>)
    +QuickSort(items: IList<object>)
    +CompareObjects(a: object, b: object): int
  }

  class DirectoryViewer {
    +Save(path: string, items: IList<object>)
    +Load(path: string): IList<object>
  }

  class ValueParser {
    +ParseValue(value: string, targetType: Type): object
    +TryParseDateExact(value: string, formats: string[], culture: CultureInfo): DateTime
  }

  class ArrayDataTypes {
    +Integer
    +Float
    +DateTime
    +GetSupportedFormats(): IList<string>
  }
}

' Реализации (сервисы реализуют интерфейсы)
ArrayManagerService ..|> IArrayManagerService : реализует
ArraySorterService ..|> IArraySorterService : реализует
FileManagerService ..|> IFileManagerService : реализует

' Зависимости и делегирование
ArrayManagerService --> ValueParser : использует
ArrayManagerService --> ArraySorterService : использует
ArraySorterService --> ArraySorter : делегирует
FileManagerService --> DirectoryViewer : делегирует
DirectoryViewer --> ValueParser : использует (парсинг делегируется)
ArrayDataTypes --> ValueParser : делегирует парсинг
MainWindow --> IArrayManagerService : зависит от
MainWindow --> IArraySorterService : зависит от
MainWindow --> IFileManagerService : зависит от

' Дополнительные связи и заметки
ArraySorterService --> ArrayDataTypes : использует типы
FileManagerService --> ArrayDataTypes : использует типы

note right of DirectoryViewer
DirectoryViewer должен быть без состояния:
только чтение/запись файлов,
без трекинга или сложного парсинга
end note

note left of ArrayManagerService
ArrayManagerService координирует состояние UI,
валидацию и блокировку элементов управления.
end note

' Стереотипы для классов библиотеки
note top of ArraySorter
<<library>> Чистые алгоритмы сортировки
end note

@enduml
