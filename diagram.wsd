@startuml ClassDiagram(UI & Services and ClassLibrary)
' PlantUML class diagram for "Сортировщик массивов" project
' File: WpfAppSorter_ClassDiagram.wsd
' Пакеты разделяют UI/Сервисы и Библиотеку классов

skinparam classAttributeIconSize 0

package "WpfAppSorter (UI & Сервисы)" {

  interface IArrayManagerService {
    +CurrentArray: List<object>
    +DataType: Type
    +MaxSize: int
    +IsInitialized: bool
    +AddElement(element: object): bool
    +RemoveLastElement(): bool
    +ClearArray()
    +CanAddElement(): bool
    +IsArrayFull(): bool
    +ParseElement(input: string): object
    +GetArrayDisplay(): string
  }

  interface IArraySorterService {
    +BubbleSort(array: List<object>): List<object>
    +SelectionSort(array: List<object>): List<object>
    +InsertionSort(array: List<object>): List<object>
    +QuickSort(array: List<object>): List<object>
  }

  interface IFileManagerService {
    +SaveArrayToFile(array: List<object>, filePath: string)
    +LoadArrayFromFile(filePath: string, dataType: Type): List<object>
    +RemoveFile(filePath: string)
    +GetTrackedFiles(): List<string>
  }

  class ArrayManagerService {
    -currentArray: List<object>
    -dataType: Type
    -maxSize: int
    -isInitialized: bool
    +CurrentArray: List<object>
    +DataType: Type
    +MaxSize: int
    +IsInitialized: bool
    +AddElement(element: object): bool
    +RemoveLastElement(): bool
    +ClearArray()
    +CanAddElement(): bool
    +IsArrayFull(): bool
    +ParseElement(input: string): object
    +GetArrayDisplay(): string
  }

  class ArraySorterService {
    -arraySorter: ArraySorter
    +BubbleSort(array: List<object>): List<object>
    +SelectionSort(array: List<object>): List<object>
    +InsertionSort(array: List<object>): List<object>
    +QuickSort(array: List<object>): List<object>
  }

  class FileManagerService {
    -directoryViewer: DirectoryViewer
    -trackedFiles: List<string>
    +SaveArrayToFile(array: List<object>, filePath: string)
    +LoadArrayFromFile(filePath: string, dataType: Type): List<object>
    +RemoveFile(filePath: string)
    +GetTrackedFiles(): List<string>
  }

  class MainWindow {
    +OnSortButtonClicked()
    +OnLoadFile()
    +OnSaveFile()
  }

}

package "ClassLibrarySorter (чистая логика)" {

  class ArraySorter {
    +BubbleSort(array: List<object>): List<object>
    +SelectionSort(array: List<object>): List<object>
    +InsertionSort(array: List<object>): List<object>
    +QuickSort(array: List<object>): List<object>
    +CompareObjects(a: object, b: object): int
  }

  class DirectoryViewer {
    +SaveArrayToFile(array: List<object>, filePath: string)
    +LoadArrayFromFile(filePath: string, dataType: Type): List<object>
  }

  class ValueParser {
    +ParseValue(value: string, dataType: Type): object
  }

  class ArrayDataTypes {
    +Integer
    +Float
    +DateTime
    +GetNetType(dataType: ArrayDataType): Type
    +GetInputHint(dataType: ArrayDataType): string
  }
}

' Реализации (сервисы реализуют интерфейсы)
ArrayManagerService ..|> IArrayManagerService : реализует
ArraySorterService ..|> IArraySorterService : реализует
FileManagerService ..|> IFileManagerService : реализует

' Зависимости и делегирование
ArrayManagerService --> ValueParser : использует
ArrayManagerService --> ArraySorterService : использует
ArraySorterService --> ArraySorter : делегирует
FileManagerService --> DirectoryViewer : делегирует
DirectoryViewer --> ValueParser : использует (парсинг делегируется)
ArrayDataTypes --> ValueParser : делегирует парсинг
MainWindow --> IArrayManagerService : зависит от
MainWindow --> IArraySorterService : зависит от
MainWindow --> IFileManagerService : зависит от

' Дополнительные связи и заметки
ArraySorterService --> ArrayDataTypes : использует типы
FileManagerService --> ArrayDataTypes : использует типы

note right of DirectoryViewer
DirectoryViewer должен быть без состояния:
только чтение/запись файлов,
без трекинга или сложного парсинга
end note

note left of ArrayManagerService
ArrayManagerService координирует состояние UI,
валидацию и блокировку элементов управления.
end note

' Стереотипы для классов библиотеки
note top of ArraySorter
<<library>> Чистые алгоритмы сортировки
end note

@enduml
